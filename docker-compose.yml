version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29093:29092
    hostname: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    ports:
#      - 8090:8080
#    restart: always
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=29092,29093
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#    links:
#      - kafka
#      - kafka2
#      - zookeeper

#  db:
#    image: postgres
#    environment:
#      - POSTGRES_PASSWORD=password
#      - POSTGRES_USER=postgres
#      - POSTGRES_DB=producer
#      - PGDATA=/var/lib/postgresql/data
#    restart: always
#    container_name: db
#    networks:
#      - my_network
#
#  producer:
#    build:
#      context: .
#      dockerfile: DockerfileP
#    environment:
#      - spring.datasource.url=jdbc:postgresql://db:5432/producer
#      - spring.datasource.username=postgres
#      - spring.datasource.password=password
#      - spring.datasource.driver-class-name=org.postgresql.Driver
#    ports:
#      - "127.0.0.1:8080:8080"
#    container_name: producer
#    depends_on:
#      - db
#    networks:
#      - my_network
#
#  consumer:
#    build:
#      context: .
#      dockerfile: DockerfileC
#    ports:
#      - "127.0.0.1:8081:8081"
#    container_name: consumer
#    networks:
#      - my_network
#
networks:
  my_network:
    driver: bridge